{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ZenScript","text":"<p>Danger</p> <p>ZenScript is a unfinished product and should not be used in production.</p> <p>This program, called ZenScript, is designed to facilitate the creation of HTML documents using a simplified programming language. Users input ZenScript code, which contains commands and content to be converted into HTML format. The program parses the ZenScript code and translates it into corresponding HTML elements, such as titles, headings, paragraphs, and links, among others. Additionally, it allows for customization of fonts and includes basic HTML structure elements like <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code>. Once the ZenScript code is processed, the program outputs the resulting HTML code, which can be saved to a file for use in web development projects. Overall, ZenScript aims to streamline the process of creating HTML documents by providing a more intuitive and structured approach.</p>"},{"location":"Adding%20HTML%20to%20ZenScript/","title":"HTML","text":"<p>Just type in anything ZenScript doesn't recognize, and it will append to the document.</p>"},{"location":"Get%20Started/","title":"Getting Started with ZenScript","text":"<p>Welcome to ZenScript, a simple tool for generating HTML documents using a user-friendly scripting language. Whether you're a beginner or an experienced web developer, ZenScript can help you create HTML content quickly and efficiently. This guide will walk you through the basics of getting started with ZenScript.</p>"},{"location":"Get%20Started/#installation","title":"Installation","text":"<p>ZenScript is a Python-based program, so you'll need to have Python installed on your computer to use it. You can download and install Python from the official website: Python.org</p> <p>Once Python is installed, you can download the ZenScript program from its GitHub repository: ZenScript GitHub Repository</p>"},{"location":"Get%20Started/#running-zenscript","title":"Running ZenScript","text":"<p>After downloading the ZenScript program, navigate to the directory where you saved it using your command line interface or terminal. Then, run the program by executing the following command:</p> <pre><code>python zenscript.py\n</code></pre> <p>This will launch the ZenScript shell, and you can enter a ZenScript file path. Then you'll be ready to write ZenScript code.</p>"},{"location":"Get%20Started/#writing-zenscript-code","title":"Writing ZenScript Code","text":"<p>ZenScript code consists of simple commands and content that describe the structure and style of your HTML document. Here's a basic example of ZenScript code:</p> <pre><code>main\ninit\ntitle Welcome to ZenScript\nendinit\nbody\nheading Hello World!\ntext Example text goes here\nendbody\nendmain\n</code></pre> <p>In this example, we're setting the title of the HTML document to \"Welcome to ZenScript\", and adding a heading and paragraph text.</p>"},{"location":"Get%20Started/#compiling-zenscript-code","title":"Compiling ZenScript Code","text":"<p>Once you've written your ZenScript code, you can compile it into HTML format using the ZenScript interpreter. Simply follow these steps:</p> <ol> <li>Save your ZenScript code in a file with a <code>.zs</code> extension (e.g., <code>example.zs</code>).</li> <li> <p>Run the ZenScript shell, then type the path to your ZenScript file.</p> </li> <li> <p>The ZenScript interpreter will process your code and generate an HTML file to the specified path based on the instructions provided.</p> </li> </ol>"},{"location":"Get%20Started/#viewing-the-html-output","title":"Viewing the HTML Output","text":"<p>After compiling your ZenScript code, you can view the resulting HTML output in any web browser. Simply open the HTML file generated by the ZenScript interpreter to see your document rendered in the browser.</p>"},{"location":"Get%20Started/#getting-help","title":"Getting Help","text":"<p>If you have any questions or need assistance while using ZenScript, feel free to consult the documentation included with the program or reach out to the community for support.</p> <p>Congratulations! You're now ready to start creating HTML documents with ZenScript. Happy coding!</p>"},{"location":"Scripting%20in%20ZenScript/","title":"Scripting in ZenScript","text":"<p>Lol it rolls off the tongue nice.</p>"},{"location":"Scripting%20in%20ZenScript/#lua","title":"lua","text":"<p>Danger</p> <p>Starting in ZenScript 0.5, a Lua.vm.js URL will need to be set in a <code>config.yml</code> file in the same directory as the ZenScript executable. This will probably be reworked in 0.6 because it is janky as fuck.</p> <p>In the init section of your ZenScript file, enter <code>initlua</code>. This imports Lua.vm.js from https://dumo.is-a.dev/lua.vm.js.</p> <p>Example: <pre><code>lua\njs.global:alert('hello from Lua script tag in ZenScript!') -- this is Lua!\nendlua\n</code></pre> The <code>lua</code> command compiles to <code>&lt;script type=\"text/lua\"&gt;</code>, and <code>endlua</code> compiles to <code>&lt;/script&gt;</code>. This is the same as <code>endjavascript</code>. Lua in ZenScript is based off of Lua.vm.js. If you would like to learn more about how to interact with the DOM in Lua, please check the Lua.vm.js documentation.</p>"},{"location":"Scripting%20in%20ZenScript/#javascript","title":"javascript","text":"<p>In the init section of your ZenScript file, enter <code>initlua</code>. This imports Lua.vm.js from https://dumo.is-a.dev/lua.vm.js.</p> <p>Example: <pre><code>javascript\nalert('this is javascript code running in a zenscript file.')\nendjavascript\n</code></pre> The <code>javascript</code> command compiles to <code>&lt;script&gt;</code>, and <code>endjavascript</code> compiles to <code>&lt;/script&gt;</code>. This is the same as <code>endlua</code>.</p>"},{"location":"body/","title":"Body","text":"<p>Info</p> <p>This should be very easy to pick up if you know HTML.</p>"},{"location":"body/#body","title":"body","text":"<p>Example: <code>body</code> This command starts the body of the html document by compiling to <code>&lt;body&gt;</code>.</p>"},{"location":"body/#endbody","title":"endbody","text":"<p>Example: <code>endbody</code> This command ends the body :skull: of the HTML document by compiling to <code>&lt;/body&gt;</code>.</p>"},{"location":"div/","title":"Div","text":"<p>Info</p> <p>This should be very easy to pick up if you know HTML.</p>"},{"location":"div/#div","title":"div","text":"<p>Example: <code>div</code> This command starts the div by compiling to <code>&lt;div&gt;</code>.</p>"},{"location":"div/#enddiv","title":"enddiv","text":"<p>Example: <code>enddiv</code> This command ends the div by compiling to <code>&lt;/div&gt;</code>.</p>"},{"location":"font/","title":"Font","text":"<p>Warning</p> <p>This may be deprecated in the future. Idk a better alternative so this is just a warning not a danger :trollface:</p> <p>Example: <code>font Andale Mono, monospace</code> This command gets the argument and sets the document's font to it from that point forward.</p>"},{"location":"heading/","title":"Heading","text":"<p>Example: <code>heading Welcome to ZenScript</code> This command gets the argument and adds a HTML heading element with the argument's text. Example Output: <code>&lt;h1&gt;My Website Title&lt;/h1&gt;</code></p>"},{"location":"icon/","title":"Icon","text":"<p>Example: <code>icon /favicon.ico</code> This command gets the argument and sets the document's favicon URL to it. Recommended for the init section. Example Output: <code>&lt;link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\"/&gt;</code></p>"},{"location":"init/","title":"init","text":"<p>Example: <code>init</code> This command starts the head of the html document by compiling to <code>&lt;head&gt;</code>.</p>"},{"location":"init/#endinit","title":"endinit","text":"<p>Example: <code>endinit</code> This command ends the head of the HTML document by compiling to <code>&lt;/head&gt;</code>.</p>"},{"location":"lb/","title":"lb","text":"<p>lb stands for line break.  Example: <code>lb</code> Example Output: <code>&lt;br&gt;</code></p>"},{"location":"main/","title":"main","text":"<p>Example: <code>main</code> This command starts the HTML document by compiling to <code>&lt;html&gt;</code>.</p>"},{"location":"main/#endmain","title":"endmain","text":"<p>Example: <code>endmain</code> This command ends the HTML document by compiling to <code>&lt;/html&gt;</code>.</p>"},{"location":"tb/","title":"tb","text":"<p>tb stands for thematic break.  Example: <code>tb</code> Example Output: <code>&lt;hr&gt;</code></p>"},{"location":"text/","title":"Text","text":"<p>Example: <code>text Insert index.html yapfest here</code> This command gets the argument and adds a HTML paragraph element with the argument's text. Example Output: <code>&lt;p&gt;This program, called ZenScript, is designed to facilitate the creation of HTML documents using a simplified programming language. Users input ZenScript code, which contains commands and content to be converted into HTML format. The program parses the ZenScript code and translates it into corresponding HTML elements, such as titles, headings, paragraphs, and links, among others. Additionally, it allows for customization of fonts and includes basic HTML structure elements like `&lt;html&gt;`, `&lt;head&gt;`, and `&lt;body&gt;`. Once the ZenScript code is processed, the program outputs the resulting HTML code, which can be saved to a file for use in web development projects. Overall, ZenScript aims to streamline the process of creating HTML documents by providing a more intuitive and structured approach.&lt;/p&gt;</code></p>"},{"location":"title/","title":"Title","text":"<p>Example: <code>title My Website Title</code> This command gets the argument and sets it to the document's title. Example Output: <code>&lt;title&gt;My Website Title&lt;/title&gt;</code></p>"}]}